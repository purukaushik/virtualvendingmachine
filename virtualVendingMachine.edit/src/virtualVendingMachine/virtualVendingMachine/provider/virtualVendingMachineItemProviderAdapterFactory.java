/**
 */
package virtualVendingMachine.virtualVendingMachine.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import virtualVendingMachine.virtualVendingMachine.util.virtualVendingMachineAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class virtualVendingMachineItemProviderAdapterFactory extends virtualVendingMachineAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public virtualVendingMachineItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link virtualVendingMachine.virtualVendingMachine.VirtualVendingMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualVendingMachineItemProvider virtualVendingMachineItemProvider;

	/**
	 * This creates an adapter for a {@link virtualVendingMachine.virtualVendingMachine.VirtualVendingMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualVendingMachineAdapter() {
		if (virtualVendingMachineItemProvider == null) {
			virtualVendingMachineItemProvider = new VirtualVendingMachineItemProvider(this);
		}

		return virtualVendingMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link virtualVendingMachine.virtualVendingMachine.PayMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PayMachineItemProvider payMachineItemProvider;

	/**
	 * This creates an adapter for a {@link virtualVendingMachine.virtualVendingMachine.PayMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPayMachineAdapter() {
		if (payMachineItemProvider == null) {
			payMachineItemProvider = new PayMachineItemProvider(this);
		}

		return payMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link virtualVendingMachine.virtualVendingMachine.ProductSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductSelectorItemProvider productSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link virtualVendingMachine.virtualVendingMachine.ProductSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductSelectorAdapter() {
		if (productSelectorItemProvider == null) {
			productSelectorItemProvider = new ProductSelectorItemProvider(this);
		}

		return productSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link virtualVendingMachine.virtualVendingMachine.CashRegister} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CashRegisterItemProvider cashRegisterItemProvider;

	/**
	 * This creates an adapter for a {@link virtualVendingMachine.virtualVendingMachine.CashRegister}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCashRegisterAdapter() {
		if (cashRegisterItemProvider == null) {
			cashRegisterItemProvider = new CashRegisterItemProvider(this);
		}

		return cashRegisterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link virtualVendingMachine.virtualVendingMachine.SunCardReceipt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SunCardReceiptItemProvider sunCardReceiptItemProvider;

	/**
	 * This creates an adapter for a {@link virtualVendingMachine.virtualVendingMachine.SunCardReceipt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSunCardReceiptAdapter() {
		if (sunCardReceiptItemProvider == null) {
			sunCardReceiptItemProvider = new SunCardReceiptItemProvider(this);
		}

		return sunCardReceiptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link virtualVendingMachine.virtualVendingMachine.ProductDispenser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductDispenserItemProvider productDispenserItemProvider;

	/**
	 * This creates an adapter for a {@link virtualVendingMachine.virtualVendingMachine.ProductDispenser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductDispenserAdapter() {
		if (productDispenserItemProvider == null) {
			productDispenserItemProvider = new ProductDispenserItemProvider(this);
		}

		return productDispenserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link virtualVendingMachine.virtualVendingMachine.ProductDatabase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductDatabaseItemProvider productDatabaseItemProvider;

	/**
	 * This creates an adapter for a {@link virtualVendingMachine.virtualVendingMachine.ProductDatabase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductDatabaseAdapter() {
		if (productDatabaseItemProvider == null) {
			productDatabaseItemProvider = new ProductDatabaseItemProvider(this);
		}

		return productDatabaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link virtualVendingMachine.virtualVendingMachine.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductItemProvider productItemProvider;

	/**
	 * This creates an adapter for a {@link virtualVendingMachine.virtualVendingMachine.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductAdapter() {
		if (productItemProvider == null) {
			productItemProvider = new ProductItemProvider(this);
		}

		return productItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link virtualVendingMachine.virtualVendingMachine.OutputDisplay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputDisplayItemProvider outputDisplayItemProvider;

	/**
	 * This creates an adapter for a {@link virtualVendingMachine.virtualVendingMachine.OutputDisplay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputDisplayAdapter() {
		if (outputDisplayItemProvider == null) {
			outputDisplayItemProvider = new OutputDisplayItemProvider(this);
		}

		return outputDisplayItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (virtualVendingMachineItemProvider != null) virtualVendingMachineItemProvider.dispose();
		if (payMachineItemProvider != null) payMachineItemProvider.dispose();
		if (productSelectorItemProvider != null) productSelectorItemProvider.dispose();
		if (cashRegisterItemProvider != null) cashRegisterItemProvider.dispose();
		if (sunCardReceiptItemProvider != null) sunCardReceiptItemProvider.dispose();
		if (productDispenserItemProvider != null) productDispenserItemProvider.dispose();
		if (productDatabaseItemProvider != null) productDatabaseItemProvider.dispose();
		if (productItemProvider != null) productItemProvider.dispose();
		if (outputDisplayItemProvider != null) outputDisplayItemProvider.dispose();
	}

}
